{"version":3,"sources":["constants.js","components/RequireAuth.js","pages/auth/Login.js","pages/auth/Signup.js","pages/NewPlaythrough.js","helpers/helpers.js","helpers/uihelpers.js","components/StudentImg.js","components/RosterRow.js","pages/Roster.js","pages/Student.js","components/ClassSelectorType.js","pages/ClassSelector.js","components/SkillsOverview.js","pages/AddStudent.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","ComposedComponent","RequireAuth","this","checkAndRedirect","axios","method","url","then","res","data","authenticated","props","history","push","catch","err","console","log","React","Component","withRouter","Login","state","username","password","errorMessage","e","preventDefault","params","login","authenticateUser","setState","response","onSubmit","field","target","value","className","Grid","container","justify","item","TextField","type","label","onChange","onInputChange","Button","variant","color","onClick","useDemoAccount","to","Signup","email","passwordMatch","error","validateFields","signup","length","validateEmail","test","String","toLowerCase","NewPlaythrough","startNewPlaythrough","house","byleth","getStudentOrder","getPlaythrough","imgSrc","replace","imgClass","xs","selectHouse","src","alt","title","selectByleth","disabled","spacing","houseButtonUI","bylethButtonUI","submitButtonUI","getNextClass","classes","sClass","certified","studentMeetsSkillReq","studentSkillLevel","reqLevel","stripSpaces","str","displayClassSkills","skills","ui","i","name","level","key","houseRGB","StudentImg","byleth_gender","RosterRow","student","appStudents","nextClass","studentInfo","_","find","renderClass","classSkills","Roster","playthrough","studentOrder","style","width","studentsInOrder","students","sort","a","b","findIndex","float","map","match","userStudent","appStudent","currentClasses","compact","completedClasses","filter","upcomingClasses","classInfo","renderSection","classesToDisplay","readyForCertification","skill","studentSkill","Paper","elevation","FormControlLabel","control","Checkbox","checked","selectClass","studentName","handleClassCheck","studentSkills","matches","highestLevel","getHighestSkillLevel","selectSkill","skillName","handleSkillCheck","fontSize","marginTop","removeStudent","position","top","ClassSelectorType","studentClasses","typeIsSet","classesSetOfType","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","join","ExpansionPanelDetails","abilities","mastery_ability","mastery_combat_art","classIsSet","classIsCertified","studentClassInfo","selectClassGoal","ClassSelector","md","SkillsOverview","getText","displaySkillsWithoutLevel","AddStudent","availableStudents","selectedStudents","includes","index","indexOf","splice","studentList","lastHouse","gender","addStudent","recruitable","renderAvailableStudents","addStudents","App","logOut","logout","appData","bind","bool","names","order","unshift","getAppData","AuthNewPlaythrough","AuthRoster","AuthStudent","Student","AuthClassSelector","AuthAddStudent","exact","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.90552334.chunk.js","sourcesContent":["const API_URL =\r\n    process.env.NODE_ENV === \"development\"\r\n        ? \"http://localhost:8000\"\r\n        : \"http://fethtracker.arielschnur.com\";\r\n\r\nexport { API_URL };\r\n","import React, { PropTypes } from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nexport default function (ComposedComponent) {\r\n    class RequireAuth extends React.Component {\r\n        componentDidMount() {\r\n            this.checkAndRedirect();\r\n        }\r\n\r\n        componentDidUpdate() {\r\n            this.checkAndRedirect();\r\n        }\r\n\r\n        async checkAndRedirect() {\r\n            await axios({\r\n                method: \"get\",\r\n                url: \"/api/account/authenticated\"\r\n            })\r\n                .then((res) => {\r\n                    if (!res.data.authenticated) {\r\n                        this.props.history.push(\"/login\");\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    {this.props.authenticated ? (\r\n                        <ComposedComponent {...this.props} />\r\n                    ) : null}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return withRouter(RequireAuth);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            errorMessage: null\r\n        };\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const { username, password } = this.state;\r\n        axios({\r\n            method: \"post\",\r\n            url: \"/api/account/login\",\r\n            params: { username, password }\r\n        })\r\n            .then((res) => {\r\n                if (res.data.login === \"success\") {\r\n                    this.props.authenticateUser(true);\r\n                    // TODO: reroute to roster and then prompt to start\r\n                    // new playthrough if none\r\n                    this.props.history.push(\"/\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                this.setState({ errorMessage: err.response.data });\r\n            });\r\n    }\r\n\r\n    useDemoAccount(e) {\r\n        this.setState({ username: \"testuser\", password: \"userpass12\" });\r\n        this.onSubmit(e);\r\n    }\r\n\r\n    onInputChange(e, field) {\r\n        this.setState({ errorMessage: null });\r\n        this.setState({ [field]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { username, password, errorMessage } = this.state;\r\n        return (\r\n            <div className=\"center\">\r\n                <h1>Log In</h1>\r\n                <Grid container justify=\"center\">\r\n                    <form onSubmit={(e) => this.onSubmit(e)}>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"text\"\r\n                                label=\"username\"\r\n                                value={username}\r\n                                onChange={(e) =>\r\n                                    this.onInputChange(e, \"username\")\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"password\"\r\n                                value={password}\r\n                                onChange={(e) =>\r\n                                    this.onInputChange(e, \"password\")\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <div className=\"form-error\">{errorMessage}</div>\r\n                        <Button\r\n                            className=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={(e) => this.onSubmit(e)}\r\n                        >\r\n                            Log In\r\n                        </Button>\r\n                        <br />\r\n                        <Button\r\n                            className=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={(e) => this.useDemoAccount(e)}\r\n                        >\r\n                            Demo Account\r\n                        </Button>\r\n                        <div>\r\n                            Don't have an account yet?{\" \"}\r\n                            <Link to=\"/signup\">Sign Up</Link>\r\n                        </div>\r\n                    </form>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            passwordMatch: \"\",\r\n            errorMessage: null\r\n        };\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const error = this.validateFields();\r\n\r\n        if (error) {\r\n            this.setState({ errorMessage: error });\r\n        } else {\r\n            const { username, password, passwordMatch, email } = this.state;\r\n            axios({\r\n                method: \"post\",\r\n                url: \"/api/account/signup\",\r\n                params: { username, password, passwordMatch, email }\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.signup === \"success\") {\r\n                        // TODO: fix rerouting to login before authenticated\r\n                        this.props.authenticateUser(true);\r\n                        this.props.history.push(\"/\");\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.setState({ errorMessage: err.response.data });\r\n                });\r\n        }\r\n    }\r\n\r\n    onInputChange(e, field) {\r\n        this.setState({ errorMessage: null });\r\n        this.setState({ [field]: e.target.value });\r\n    }\r\n\r\n    validateFields() {\r\n        const { username, password, passwordMatch, email } = this.state;\r\n\r\n        if (!username) {\r\n            return \"Please enter a username\";\r\n        }\r\n        if (!email) {\r\n            return \"Please enter an email\";\r\n        }\r\n        if (!password) {\r\n            return \"Please enter a password\";\r\n        }\r\n        if (!passwordMatch) {\r\n            return \"Please enter a matching password\";\r\n        }\r\n\r\n        if (username.length < 8) {\r\n            return \"Please enter a longer username\";\r\n        }\r\n        if (password.length < 10) {\r\n            return \"Please enter a password of at least 10 characters\";\r\n        }\r\n        if (passwordMatch !== password) {\r\n            return \"Please enter a matching password\";\r\n        }\r\n        if (!validateEmail) {\r\n            return \"Invalid email\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            username,\r\n            email,\r\n            password,\r\n            passwordMatch,\r\n            errorMessage\r\n        } = this.state;\r\n        return (\r\n            <div className=\"center\">\r\n                <h1>Sign Up</h1>\r\n                <Grid container justify=\"center\">\r\n                    <form onSubmit={(e) => this.onSubmit(e)}>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"text\"\r\n                                label=\"username\"\r\n                                value={username}\r\n                                onChange={(e) =>\r\n                                    this.onInputChange(e, \"username\")\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"text\"\r\n                                label=\"email\"\r\n                                value={email}\r\n                                onChange={(e) => this.onInputChange(e, \"email\")}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"password\"\r\n                                value={password}\r\n                                onChange={(e) =>\r\n                                    this.onInputChange(e, \"password\")\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"auth-input\">\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"passwordMatch\"\r\n                                value={passwordMatch}\r\n                                onChange={(e) =>\r\n                                    this.onInputChange(e, \"passwordMatch\")\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <div className=\"form-error\">{errorMessage}</div>\r\n                        <Button\r\n                            className=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={(e) => this.onSubmit(e)}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                    </form>\r\n                </Grid>\r\n                <div>\r\n                    Already have an account? <Link to=\"/login\">Log In</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction validateEmail(email) {\r\n    //eslint-disable-next-line\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport default withRouter(Signup);\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\nclass NewPlaythrough extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { house: null, byleth: null };\n    }\n\n    selectHouse(house) {\n        this.setState({ house });\n    }\n\n    selectByleth(byleth) {\n        this.setState({ byleth });\n    }\n\n    startNewPlaythrough = () => {\n        const { house, byleth } = this.state;\n\n        axios({\n            method: \"post\",\n            url: \"api/user/new_playthrough\",\n            params: { house, byleth }\n        })\n            .then((res) => {\n                // TODO: fix order not updating on new playthrough\n                if (res.data === \"success\") {\n                    this.props.history.push(\"/\");\n                    this.props.getStudentOrder();\n                    this.props.getPlaythrough();\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    houseButtonUI(house) {\n        const imgSrc = `/img/banners/${house.replace(/\\s+/g, \"_\")}_Banner.png`;\n        let imgClass = \"banner-choice new-playthrough-choice\";\n        if (this.state.house === house) {\n            imgClass += \" new-playthrough-choice-selected\";\n        }\n\n        return (\n            <Grid item xs={4} onClick={() => this.selectHouse(house)}>\n                <img\n                    src={imgSrc}\n                    className={imgClass}\n                    alt={house}\n                    title={house}\n                />\n            </Grid>\n        );\n    }\n\n    bylethButtonUI(byleth) {\n        const imgSrc = `/img/students/Byleth_${byleth}.png`;\n        let imgClass = \"byleth-choice new-playthrough-choice\";\n        if (this.state.byleth === byleth) {\n            imgClass += \" new-playthrough-choice-selected\";\n        }\n\n        return (\n            <Grid item xs={4} onClick={() => this.selectByleth(byleth)}>\n                <img\n                    src={imgSrc}\n                    className={imgClass}\n                    alt={`Byleth-${byleth}`}\n                    title={`Byleth-${byleth}`}\n                />\n            </Grid>\n        );\n    }\n\n    submitButtonUI() {\n        if (this.state.house && this.state.byleth) {\n            return (\n                <Button\n                    className={`button ${this.state.house.replace(/\\s+/g, \"\")}`}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.startNewPlaythrough}\n                >\n                    Start!\n                </Button>\n            );\n        } else {\n            return (\n                <Button\n                    className=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled\n                >\n                    Start\n                </Button>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to=\"/\">\n                    <KeyboardBackspaceIcon />\n                </Link>\n                <div className=\"padding center\">\n                    <h1>New Playthrough</h1>\n                    <h2>Select House</h2>\n                    <Grid container spacing={2}>\n                        {this.houseButtonUI(\"Black Eagles\")}\n                        {this.houseButtonUI(\"Blue Lions\")}\n                        {this.houseButtonUI(\"Golden Deer\")}\n                    </Grid>\n                    <h2>Select Byleth</h2>\n                    <Grid container justify=\"center\" spacing={2}>\n                        {this.bylethButtonUI(\"M\")}\n                        {this.bylethButtonUI(\"F\")}\n                    </Grid>\n                    {this.submitButtonUI()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(NewPlaythrough);\n","import _ from \"lodash\";\n\nexport function getNextClass(classes) {\n    for (let sClass of classes) {\n        const { certified } = sClass;\n        if (!certified) {\n            return sClass;\n        }\n    }\n    return null;\n}\n\n// TODO: test this more\nexport function studentMeetsSkillReq(studentSkillLevel, reqLevel) {\n    if (!studentSkillLevel) {\n        return false;\n    }\n\n    return studentSkillLevel <= reqLevel;\n}\n\nexport function getHighestSkillLevel(studentSkills, name) {\n    const matches = _.filter(studentSkills, { name });\n\n    if (matches.length < 1) {\n        return null;\n    } else if (matches.length === 1) {\n        return matches[0].level;\n    } else {\n        let highestLevel = \"E\";\n        for (let skill of matches) {\n            const { level } = skill;\n            if (level < highestLevel) {\n                highestLevel = level;\n            }\n        }\n        return highestLevel;\n    }\n}\n\nexport function stripSpaces(str) {\n    return str.replace(/\\s+/g, \"\");\n}\n","import React from \"react\";\r\n\r\n// TODO: don't display skills already acquired\r\n// (make that an option?)\r\nexport function displayClassSkills(skills) {\r\n    let ui = [];\r\n    for (let i in skills) {\r\n        const { name, level } = skills[i];\r\n        ui.push(\r\n            <span key={name}>\r\n                {name} {level}\r\n            </span>\r\n        );\r\n        if (i < skills.length - 1) {\r\n            ui.push(\", \");\r\n        }\r\n    }\r\n    return ui;\r\n}\r\n\r\nexport function displaySkillsWithoutLevel(skills) {\r\n    let ui = [];\r\n    for (let i in skills) {\r\n        const { name } = skills[i];\r\n        ui.push(<span key={name}>{name}</span>);\r\n        if (i < skills.length - 1) {\r\n            ui.push(\", \");\r\n        }\r\n    }\r\n    return ui;\r\n}\r\n\r\nexport function houseRGB(house) {\r\n    switch (house) {\r\n        case \"Black Eagles\":\r\n            return \"rgb(206, 54, 87)\";\r\n        case \"Blue Lions\":\r\n            return \"rgb(77, 95, 169)\";\r\n        default:\r\n            return \"rgb(223, 192, 74)\";\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst StudentImg = (props) => {\r\n    const { name, byleth_gender, house } = props;\r\n    // TODO: just get gender, can get rid of byleth_gender\r\n\r\n    let imgSrc = `/img/students/${name}.png`;\r\n    if (name === \"Byleth\") {\r\n        imgSrc = `/img/students/Byleth_${byleth_gender}.png`;\r\n    }\r\n\r\n    return (\r\n        <img\r\n            src={imgSrc}\r\n            className={`roster-img ${house.replace(/\\s+/g, \"\")}`}\r\n            alt={name}\r\n            title={name}\r\n        />\r\n    );\r\n};\r\n\r\nexport default StudentImg;\r\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getNextClass } from \"../helpers/helpers\";\nimport { displayClassSkills } from \"../helpers/uihelpers\";\n\nimport StudentImg from \"../components/StudentImg\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\n\nconst RosterRow = (props) => {\n    const { name, classes, skills } = props.student;\n    const { appStudents, byleth_gender, house } = props;\n    const nextClass = getNextClass(classes);\n\n    // only show lowest level uncertified class\n    const renderClass = (nextClass) => {\n        const { name, type } = nextClass;\n        return (\n            <span>\n                {name} ({type})\n            </span>\n        );\n    };\n    const studentInfo = _.find(appStudents, { name });\n\n    return (\n        <div key={name} className=\"roster-row\">\n            <Grid container spacing={3}>\n                <Grid item xs={3}>\n                    <StudentImg\n                        name={name}\n                        byleth_gender={byleth_gender}\n                        house={name !== \"Byleth\" ? studentInfo.house : house}\n                    />\n                </Grid>\n                <Grid item xs={7} className=\"roster-row-student\">\n                    <p className=\"roster-name\">{name}</p>\n                    <p>\n                        {classes.length > 0 ? (\n                            <span>Next class: {renderClass(nextClass)}</span>\n                        ) : (\n                            \"No classes set\"\n                        )}\n                    </p>\n                    <p>\n                        {nextClass ? (\n                            <span>\n                                Skills needed:{\" \"}\n                                {displayClassSkills(nextClass.classSkills)}\n                            </span>\n                        ) : null}\n                    </p>\n                </Grid>\n                <Grid item xs={2}>\n                    <Link to={`/student/${name}`}>\n                        <ArrowRightAltIcon />\n                    </Link>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default RosterRow;\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport RosterRow from \"../components/RosterRow\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// TODO: sort roster by your house -> next 2 houses -> faculty -> other\r\nconst Roster = (props) => {\r\n    if (!props.playthrough || !props.studentOrder) {\r\n        return (\r\n            <div className=\"padding\">\r\n                <h1>No playthrough found.</h1>\r\n                <Link to=\"/new_playthrough\">\r\n                    <Button\r\n                        className=\"button\"\r\n                        style={{ width: \"90%\" }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Start New Playthrough\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const { studentOrder } = props;\r\n    const { house, byleth_gender, students } = props.playthrough;\r\n\r\n    const studentsInOrder = students.sort((a, b) => {\r\n        return (\r\n            _.findIndex(studentOrder, { name: a.name }) -\r\n            _.findIndex(studentOrder, { name: b.name })\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"padding\">\r\n                <h1>\r\n                    {house} Roster\r\n                    <span style={{ float: \"right\" }}>\r\n                        <Link to=\"/add_student\">\r\n                            <AddCircleOutlineIcon />\r\n                        </Link>\r\n                    </span>\r\n                </h1>\r\n            </div>\r\n            <ul>\r\n                {studentsInOrder.map((student) => {\r\n                    return (\r\n                        <RosterRow\r\n                            key={student.name}\r\n                            student={student}\r\n                            byleth_gender={byleth_gender}\r\n                            house={house}\r\n                            appStudents={props.appStudents}\r\n                        />\r\n                    );\r\n                })}\r\n            </ul>\r\n            <div className=\"center footer\">\r\n                <Link to=\"/new_playthrough\">\r\n                    <Button\r\n                        className=\"button\"\r\n                        style={{ width: \"90%\" }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Start New Playthrough\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Roster;\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    getNextClass,\r\n    studentMeetsSkillReq,\r\n    getHighestSkillLevel\r\n} from \"../helpers/helpers\";\r\nimport { displayClassSkills, houseRGB } from \"../helpers/uihelpers\";\r\n\r\nimport StudentImg from \"../components/StudentImg\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\n\r\nconst Student = (props) => {\r\n    if (!props.playthrough) {\r\n        return \"loading...\";\r\n    }\r\n\r\n    const { name } = props.match.params;\r\n\r\n    const userStudent = _.find(props.playthrough.students, { name });\r\n    const { classes, skills } = userStudent;\r\n    const appStudent = _.find(props.appStudents, { name });\r\n\r\n    // TODO: if no next class, indicate whether next class not set, or\r\n    // if character has reached end of class path\r\n    const nextClass = getNextClass(classes);\r\n    const currentClasses = _.compact([nextClass]);\r\n    const completedClasses = _.compact(_.filter(classes, { certified: true }));\r\n    const upcomingClasses = _.compact(\r\n        classes.filter((classInfo) => {\r\n            if (!classInfo.certified && classInfo.name !== nextClass.name) {\r\n                return classInfo;\r\n            }\r\n        })\r\n    );\r\n\r\n    const removeStudent = (name) => {\r\n        axios({\r\n            method: \"post\",\r\n            url: \"/api/user/remove_student\",\r\n            params: { name }\r\n        }).then((res) => {\r\n            if (res.data === \"success\") {\r\n                props.removeStudent(name);\r\n                props.history.push(\"/\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleClassCheck = (e, name) => {\r\n        props.selectClass({\r\n            studentName: props.match.params.name,\r\n            className: name\r\n        });\r\n    };\r\n\r\n    const handleSkillCheck = (e, skill) => {\r\n        props.selectSkill({\r\n            studentName: props.match.params.name,\r\n            skillName: skill.name,\r\n            level: skill.level\r\n        });\r\n    };\r\n\r\n    const renderSection = (type, classesToDisplay) => {\r\n        if (classesToDisplay.length < 1) {\r\n            return (\r\n                <div>\r\n                    <h2>{type}</h2>\r\n                    None\r\n                    {type === \"current\" ? (\r\n                        <span>\r\n                            {\" \"}\r\n                            -{\" \"}\r\n                            <Link to={`/select_classes/${name}`}>Set now</Link>\r\n                        </span>\r\n                    ) : null}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{type}</h2>\r\n                {classesToDisplay.length > 0 ? (\r\n                    classesToDisplay.map(({ name, classSkills, certified }) => {\r\n                        let readyForCertification = false;\r\n                        if (!certified && classSkills.length > 0) {\r\n                            const skillsMet = classSkills.filter((skill) => {\r\n                                const studentSkill = _.find(skills, {\r\n                                    name: skill.name\r\n                                });\r\n                                if (studentSkill) {\r\n                                    if (\r\n                                        (studentSkill,\r\n                                        studentMeetsSkillReq(\r\n                                            studentSkill.level,\r\n                                            skill.level\r\n                                        ))\r\n                                    ) {\r\n                                        return skill;\r\n                                    }\r\n                                }\r\n                            });\r\n                            if (skillsMet.length === classSkills.length) {\r\n                                readyForCertification = true;\r\n                            }\r\n                        }\r\n                        return (\r\n                            <Paper\r\n                                className=\"goal-row\"\r\n                                elevation={1}\r\n                                key={name}\r\n                            >\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={6}>\r\n                                        <h3>Class</h3>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={certified}\r\n                                                    onChange={(e) =>\r\n                                                        handleClassCheck(\r\n                                                            e,\r\n                                                            name\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label={name}\r\n                                        />\r\n                                        {readyForCertification ? (\r\n                                            <ErrorIcon\r\n                                                style={{\r\n                                                    color: houseRGB(\r\n                                                        props.playthrough.house\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                        ) : null}\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <h3>Skills Required</h3>\r\n                                        {classSkills.map((skill) => {\r\n                                            const studentSkillLevel = getHighestSkillLevel(\r\n                                                skills,\r\n                                                skill.name\r\n                                            );\r\n\r\n                                            return (\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox\r\n                                                            checked={studentMeetsSkillReq(\r\n                                                                studentSkillLevel,\r\n                                                                skill.level\r\n                                                            )}\r\n                                                            onChange={(e) =>\r\n                                                                handleSkillCheck(\r\n                                                                    e,\r\n                                                                    skill\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                    }\r\n                                                    label={`${skill.name} ${skill.level}`}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <div>none</div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"padding\">\r\n            <Link to=\"/\">\r\n                <KeyboardBackspaceIcon />\r\n            </Link>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3}>\r\n                    <StudentImg\r\n                        name={name}\r\n                        byleth_gender={props.playthrough.byleth_gender}\r\n                        house={\r\n                            name !== \"Byleth\"\r\n                                ? appStudent.house\r\n                                : props.playthrough.house\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={9} className=\"roster-row-student\">\r\n                    <p className=\"roster-name\">\r\n                        {name}{\" \"}\r\n                        <Link to={`/select_classes/${name}`}>\r\n                            <EditIcon fontSize=\"small\" />\r\n                        </Link>\r\n                    </p>\r\n                    <p>\r\n                        Next class:{\" \"}\r\n                        {nextClass\r\n                            ? `${nextClass.name} (${nextClass.type}}`\r\n                            : \"none\"}\r\n                    </p>\r\n                    <p>\r\n                        Skills needed:{\" \"}\r\n                        {nextClass\r\n                            ? displayClassSkills(nextClass.classSkills)\r\n                            : \"n/a\"}{\" \"}\r\n                    </p>\r\n                </Grid>\r\n            </Grid>\r\n            {renderSection(\"current\", currentClasses)}\r\n            {upcomingClasses.length > 0\r\n                ? renderSection(\"upcoming\", upcomingClasses)\r\n                : null}\r\n            {renderSection(\"completed\", completedClasses)}\r\n            <div\r\n                className=\"footer center\"\r\n                style={{ marginTop: \"20px\" }}\r\n                onClick={() => removeStudent(name)}\r\n            >\r\n                <HighlightOffIcon\r\n                    style={{ position: \"relative\", top: \"7px\" }}\r\n                />\r\n                <span> Remove from Roster</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Student);\r\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { displayClassSkills } from \"../helpers/uihelpers\";\nimport { stripSpaces } from \"../helpers/helpers\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst ClassSelectorType = (props) => {\n    const { studentClasses, type } = props;\n\n    let typeIsSet = false;\n    const classesSetOfType = _.compact(\n        props.studentClasses.map((sClass) => {\n            if (sClass.type === type) {\n                return sClass.name;\n            }\n        })\n    );\n    if (classesSetOfType.length > 0) {\n        typeIsSet = true;\n    }\n\n    return (\n        <div>\n            <ExpansionPanel>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className={\n                        typeIsSet ? `${stripSpaces(props.house)}-bg` : null\n                    }\n                >\n                    {props.type}\n                    {typeIsSet ? ` (${classesSetOfType.join(\", \")})` : null}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <ul style={{ width: \"100%\" }}>\n                        {props.classes.map(\n                            ({\n                                name,\n                                skills,\n                                abilities,\n                                mastery_ability,\n                                mastery_combat_art\n                            }) => {\n                                let classIsSet = false;\n                                let classIsCertified = false;\n\n                                const studentClassInfo = _.find(\n                                    studentClasses,\n                                    { name }\n                                );\n                                if (studentClassInfo) {\n                                    classIsSet = true;\n                                    if (studentClassInfo.certified) {\n                                        classIsCertified = true;\n                                    }\n                                }\n\n                                let className = \"set-class\";\n                                if (classIsCertified) {\n                                    className += \" certified\";\n                                } else if (classIsSet) {\n                                    className += ` ${stripSpaces(\n                                        props.house\n                                    )}-bg`;\n                                } else {\n                                    className += \" unset\";\n                                }\n\n                                return (\n                                    <li\n                                        key={name}\n                                        className={className}\n                                        onClick={() =>\n                                            props.selectClassGoal({\n                                                studentName: props.student,\n                                                className: name\n                                            })\n                                        }\n                                    >\n                                        <span className=\"class-name\">\n                                            {name}\n                                            {classIsCertified\n                                                ? \" (Certified)\"\n                                                : null}\n                                        </span>\n                                        <br />\n                                        Skills required:{\" \"}\n                                        {displayClassSkills(skills)}\n                                        <br />\n                                        Class abilities: {abilities || \"none\"}\n                                        <br />\n                                        Class mastery:{\" \"}\n                                        {mastery_ability ? (\n                                            <span>\n                                                Ability {mastery_ability}\n                                            </span>\n                                        ) : null}\n                                        {mastery_ability && mastery_combat_art\n                                            ? \", \"\n                                            : null}\n                                        {mastery_combat_art ? (\n                                            <span>\n                                                Combat Art {mastery_combat_art}\n                                            </span>\n                                        ) : null}\n                                    </li>\n                                );\n                            }\n                        )}\n                    </ul>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </div>\n    );\n};\n\nexport default ClassSelectorType;\n","import _ from \"lodash\";\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../constants\";\r\n\r\nimport ClassSelectorType from \"../components/ClassSelectorType\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\n\r\n// TODO: fix reloading on selection,\r\n// maybe store changes in state and\r\n// have save button to update db\r\nclass ClassSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { classes: {} };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            method: \"get\",\r\n            url: `${API_URL}/api/app/classes`\r\n        }).then((res) => {\r\n            this.setState({ classes: res.data });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.playthrough) {\r\n            return \"loading...\";\r\n        }\r\n\r\n        const { name } = this.props.match.params;\r\n\r\n        const types = [\r\n            \"Beginner\",\r\n            \"Intermediate\",\r\n            \"Advanced\",\r\n            \"Master\",\r\n            \"Unique\"\r\n        ];\r\n\r\n        const { students, house } = this.props.playthrough;\r\n\r\n        return (\r\n            <div className=\"padding\">\r\n                <KeyboardBackspaceIcon\r\n                    onClick={() => {\r\n                        this.props.history.push(`/student/${name}`);\r\n                    }}\r\n                />\r\n                <h1>Select Classes for {name}</h1>\r\n                <Grid container spacing={1}>\r\n                    {types.map((type) => {\r\n                        const studentInfo = _.find(students, { name });\r\n                        return (\r\n                            <Grid item xs={12} md={6}>\r\n                                <ClassSelectorType\r\n                                    type={type}\r\n                                    student={name}\r\n                                    classes={_.filter(this.state.classes, {\r\n                                        type\r\n                                    })}\r\n                                    studentClasses={studentInfo.classes}\r\n                                    house={house}\r\n                                    selectClassGoal={this.props.selectClassGoal}\r\n                                    key={type}\r\n                                />\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClassSelector;\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { displaySkillsWithoutLevel } from \"../helpers/uihelpers\";\r\n\r\nconst SkillsOverview = (props) => {\r\n    const { skills } = props;\r\n\r\n    const types = [\"proficient\", \"budding\", \"weakness\"];\r\n\r\n    const getText = (type, matches) => {\r\n        if (type === \"proficient\") {\r\n            if (matches) {\r\n                return \"Proficient in: \";\r\n            } else {\r\n                return \"No proficient skills\";\r\n            }\r\n        } else if (type === \"budding\") {\r\n            if (matches) {\r\n                return \"Budding talent: \";\r\n            }\r\n        } else {\r\n            if (matches) {\r\n                return \"Weaknesses: \";\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {types.map((type) => {\r\n                const matches = _.filter(skills, { [type]: true });\r\n                if (matches.length > 0) {\r\n                    return (\r\n                        <div>\r\n                            {getText(type, true)}\r\n                            {displaySkillsWithoutLevel(matches)}\r\n                        </div>\r\n                    );\r\n                }\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SkillsOverview;\r\n","import _ from \"lodash\";\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport StudentImg from \"../components/StudentImg\";\r\nimport SkillsOverview from \"../components/SkillsOverview\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass AddStudent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { availableStudents: [], selectedStudents: [] };\r\n    }\r\n\r\n    addStudent(name) {\r\n        const { selectedStudents } = this.state;\r\n        if (!selectedStudents.includes(name)) {\r\n            selectedStudents.push(name);\r\n        } else {\r\n            const index = _.indexOf(selectedStudents, name);\r\n            selectedStudents.splice(index, 1);\r\n        }\r\n        this.setState({ selectedStudents });\r\n    }\r\n\r\n    renderAvailableStudents() {\r\n        const { availableStudents, selectedStudents } = this.state;\r\n\r\n        let studentList = [];\r\n        let lastHouse = null;\r\n\r\n        for (let student of availableStudents) {\r\n            const { name, gender, house, skills } = student;\r\n            if (!lastHouse || lastHouse !== house) {\r\n                lastHouse = house;\r\n                studentList.push(\r\n                    <h2 className=\"padding\" key={house}>\r\n                        {house}\r\n                    </h2>\r\n                );\r\n            }\r\n\r\n            studentList.push(\r\n                <Grid\r\n                    container\r\n                    className={`roster-row add-student-row${\r\n                        selectedStudents.includes(name)\r\n                            ? ` add-student-selected ${house.replace(\r\n                                  /\\s+/g,\r\n                                  \"\"\r\n                              )}`\r\n                            : null\r\n                    }`}\r\n                    key={name}\r\n                    onClick={() => this.addStudent(name)}\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <StudentImg\r\n                            name={name}\r\n                            byleth_gender={gender || \"F\"}\r\n                            house={house}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <p className=\"roster-name\" style={{ marginTop: 0 }}>\r\n                            {name}\r\n                        </p>\r\n                        <SkillsOverview skills={skills} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        return studentList;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.playthrough && this.props.playthrough.students) {\r\n            axios({\r\n                method: \"get\",\r\n                url: \"/api/app/students\"\r\n            }).then((res) => {\r\n                this.setState({\r\n                    availableStudents: res.data.filter((student) => {\r\n                        if (\r\n                            student.recruitable &&\r\n                            !_.find(this.props.playthrough.students, {\r\n                                name: student.name\r\n                            })\r\n                        ) {\r\n                            return student;\r\n                        }\r\n                    })\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedStudents } = this.state;\r\n        if (!this.props.playthrough || !this.props.playthrough.students) {\r\n            return \"loading...\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Link to=\"/\">\r\n                    <KeyboardBackspaceIcon />\r\n                </Link>\r\n                <h1 className=\"padding\">Add Students</h1>\r\n                <ul>{this.renderAvailableStudents()}</ul>\r\n                <div className=\"center footer\">\r\n                    <Link to=\"/\">\r\n                        <Button\r\n                            className=\"button\"\r\n                            style={{ width: \"90%\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() =>\r\n                                this.props.addStudents(selectedStudents)\r\n                            }\r\n                            disabled={selectedStudents.length < 1}\r\n                        >\r\n                            Add\r\n                        </Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddStudent;\r\n","import _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { API_URL } from \"./constants\";\nimport \"./App.css\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport RequireAuth from \"./components/RequireAuth\";\nimport Login from \"./pages/auth/Login\";\nimport Signup from \"./pages/auth/Signup\";\nimport NewPlaythrough from \"./pages/NewPlaythrough\";\nimport Roster from \"./pages/Roster\";\nimport Student from \"./pages/Student\";\nimport ClassSelector from \"./pages/ClassSelector\";\nimport AddStudent from \"./pages/AddStudent\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { authenticated: false, playthrough: null, appData: null };\n\n        this.authenticateUser = this.authenticateUser.bind(this);\n        this.getPlaythrough = this.getPlaythrough.bind(this);\n        this.selectClassGoal = this.selectClassGoal.bind(this);\n        this.selectClass = this.selectClass.bind(this);\n        this.selectSkill = this.selectSkill.bind(this);\n        this.addStudents = this.addStudents.bind(this);\n        this.removeStudent = this.removeStudent.bind(this);\n        this.getStudentOrder = this.getStudentOrder.bind(this);\n    }\n\n    authenticateUser(bool) {\n        this.setState({ authenticated: bool });\n    }\n\n    logOut = () => {\n        axios({\n            method: \"get\",\n            url: \"/api/account/logout\"\n        })\n            .then((res) => {\n                if (res.data.logout === \"success\") {\n                    this.authenticateUser(false);\n                    this.props.history.push(\"/\");\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    async getPlaythrough() {\n        await axios({\n            method: \"get\",\n            url: `${API_URL}/api/user/playthrough`\n        }).then((res) => {\n            this.setState({ playthrough: res.data });\n        });\n    }\n\n    async selectClassGoal({ studentName, className }) {\n        await axios({\n            method: \"post\",\n            url: \"/api/user/update_student_class_goal\",\n            params: { studentName, className }\n        }).then((res) => {\n            if (res.data === \"success\") {\n                this.getPlaythrough();\n            }\n        });\n    }\n\n    async selectClass({ studentName, className }) {\n        await axios({\n            method: \"post\",\n            url: \"/api/user/update_student_class\",\n            params: { studentName, className }\n        }).then((res) => {\n            if (res.data === \"success\") {\n                this.getPlaythrough();\n            }\n        });\n    }\n\n    async selectSkill({ studentName, skillName, level }) {\n        await axios({\n            method: \"post\",\n            url: \"/api/user/update_student_skill\",\n            params: { studentName, skillName, level }\n        }).then((res) => {\n            if (res.data === \"success\") {\n                this.getPlaythrough();\n            }\n        });\n    }\n\n    async addStudents(names) {\n        axios({\n            method: \"post\",\n            url: \"/api/user/add_students\",\n            params: { names }\n        }).then((res) => {\n            if (res.data === \"success\") {\n                this.getPlaythrough();\n            }\n        });\n    }\n\n    removeStudent() {\n        this.getPlaythrough();\n    }\n\n    async getAppData() {\n        let students, classes;\n\n        await axios({\n            method: \"get\",\n            url: `${API_URL}/api/app/classes`\n        }).then((res) => {\n            classes = res.data;\n        });\n\n        await axios({\n            method: \"get\",\n            url: `${API_URL}/api/app/students`\n        }).then((res) => {\n            students = res.data;\n        });\n\n        this.setState({ appData: { students, classes } });\n    }\n\n    getStudentOrder() {\n        const { playthrough, appData } = this.state;\n\n        let order = [];\n        if (playthrough && appData) {\n            const { house } = playthrough;\n            const { students } = appData;\n            order = students.filter((student) => {\n                if (student.house === house) {\n                    return student;\n                }\n            });\n            order.unshift({ name: \"Byleth\" });\n            for (let student of students) {\n                if (!_.find(order, { name: student.name })) {\n                    order.push(student);\n                }\n            }\n\n            this.setState({ studentOrder: order });\n        }\n    }\n\n    async componentDidMount() {\n        await axios({\n            method: \"get\",\n            url: \"/api/account/authenticated\"\n        })\n            .then((res) => {\n                const { authenticated } = res.data;\n                this.setState({ authenticated });\n\n                if (authenticated) {\n                    this.getPlaythrough();\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n\n        await this.getAppData();\n\n        this.getStudentOrder();\n    }\n\n    render() {\n        const {\n            authenticated,\n            playthrough,\n            appData,\n            studentOrder\n        } = this.state;\n\n        if (!appData) {\n            return \"loading...\";\n        }\n\n        const AuthNewPlaythrough = RequireAuth(NewPlaythrough);\n        const AuthRoster = RequireAuth(Roster);\n        const AuthStudent = RequireAuth(Student);\n        const AuthClassSelector = RequireAuth(ClassSelector);\n        const AuthAddStudent = RequireAuth(AddStudent);\n\n        return (\n            <div className=\"App\">\n                <BrowserRouter>\n                    <header>\n                        {authenticated ? (\n                            <nav className=\"right\">\n                                <Link to=\"/login\" onClick={this.logOut}>\n                                    Log Out\n                                </Link>\n                            </nav>\n                        ) : null}\n                    </header>\n                    <Grid container justify=\"center\">\n                        <Switch>\n                            <Route\n                                exact\n                                path=\"/\"\n                                render={() => (\n                                    <AuthRoster\n                                        authenticated={authenticated}\n                                        authenticateUser={this.authenticateUser}\n                                        playthrough={playthrough}\n                                        appStudents={appData.students}\n                                        studentOrder={studentOrder}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/login\"\n                                render={() => (\n                                    <Login\n                                        playthrough={playthrough}\n                                        authenticateUser={this.authenticateUser}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/signup\"\n                                render={() => (\n                                    <Signup\n                                        authenticateUser={this.authenticateUser}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/new_playthrough\"\n                                render={() => (\n                                    <AuthNewPlaythrough\n                                        authenticated={authenticated}\n                                        getPlaythrough={this.getPlaythrough}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/student/:name\"\n                                render={() => (\n                                    <AuthStudent\n                                        authenticated={authenticated}\n                                        playthrough={playthrough}\n                                        selectClass={this.selectClass}\n                                        selectSkill={this.selectSkill}\n                                        removeStudent={this.removeStudent}\n                                        appStudents={appData.students}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/select_classes/:name\"\n                                render={() => (\n                                    <AuthClassSelector\n                                        authenticated={authenticated}\n                                        playthrough={playthrough}\n                                        selectClassGoal={this.selectClassGoal}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/add_student\"\n                                render={() => (\n                                    <AuthAddStudent\n                                        authenticated={authenticated}\n                                        playthrough={playthrough}\n                                        addStudents={this.addStudents}\n                                    />\n                                )}\n                            />\n                        </Switch>\n                    </Grid>\n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}